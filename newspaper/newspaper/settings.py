"""
Django settings for newspaper project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z4z^@e5dksr@8h$9sm3ckyd3@ua$6#b9bnf0wj39liaxp+mc!p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Добавляли данную переменную(она необходима для управления несколькими сайтами)
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'newsarticle.apps.NewsarticleConfig',
    # Приложение для создания фильтров
    'django_filters',
    # Приложения для allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    # Приложение для выполнения задач по расписанию
    'django_apscheduler',
    # Приложение для работы с REST Api
    'rest_framework',

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Мидлвар для Flatpages
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # Мидлвар для allauth
    'allauth.account.middleware.AccountMiddleware',
    # Кэширование всего сайта целиком
    #'django.middleware.cache.UpdateCacheMiddleware',
    #'django.middleware.common.CommonMiddleware',
    #'django.middleware.cache.FetchFromCacheMiddleware',

]

ROOT_URLCONF = 'newspaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Задание базовых директорий(в данном случае место хранение темплейтов)
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Добавлен контекстный процессор для allauth
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'newspaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Добавлено для работы с allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Переопределяем форму на Custom, что бы зарегистрировавшегося пользователя сразу
# отправлять в группу users
ACCOUNT_FORMS = {'signup': 'accounts.forms.CustomSignupForm'}

# Определение обязательных и необязательных полей для регистрации и авторизации
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Добавление провайдера для реализации OAuth
SOCIALACCOUNT_PROVIDERS = {
    'yandex': {
        'APP': {
            'client_id': 'd99dcb220ab14d4c95c1e497e0f7f6f7',
            'secret': '2e6dcc3916384a6497f2cfb938d563ce',
            'key': '',
        }
    }
}

# Настройка почты для рассылок
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'treenew2@yandex.ru'
EMAIL_HOST_PASSWORD = 'hpmainxktiqcsofg'
EMAIL_USE_SSL = 'True'

DEFAULT_FROM_EMAIL = 'treenew2@yandex.ru'

SERVER_EMAIL = 'treenew2@yandex.ru'

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Добален путь к базовой директории для файлов css
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Добавлен путь для редиректа по умолчанию после авторизации
LOGIN_REDIRECT_URL = "/news"

# Добавление переменных для работы с планировщиком задач
APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'
APSCHEDULER_RUN_NOW_TIMEOUT = 25

# Настройки для работы Celery и Redis (асинхронная работа приложения)
CELERY_BROKER_URL = 'redis://default:R1p01YwV6wKa2hhXbo864OMNzuDj12Po@redis-13663.c327.europe-west1-2.gce.cloud.redislabs.com:13663'
CELERY_RESULT_BACKEND = 'redis://default:R1p01YwV6wKa2hhXbo864OMNzuDj12Po@redis-13663.c327.europe-west1-2.gce.cloud.redislabs.com:13663'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Настройки для кэширования
CACHES = {
    'default': {
        # Для кэширования всего приложения добавляем TIMEOUT
        #'TIMEOUT': 60,
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# Настройка логирования
ADMINS = [('Nikolai', 'treenew2@yandex.ru')]
LOGGING = {
    'version': 1,
    'disable_existing_logger': False,
    'style': '{',
    # Настройка логгеров с указанием используемого хендлера
    'loggers': {
        'django': {
            'level': 'DEBUG',
            'handlers': ['console1', 'console2', 'console3', 'filegeneral'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['fileerrors', 'mailadmins'],
            'propagate': True,
        },
        'django.server': {
            'handlers': ['fileerrors', 'mailadmins'],
            'propagate': True,
        },
        'django.template': {
            'handlers': ['fileerrors'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['fileerrors'],
            'propagate': True,
        },
        'django.security': {
            'handlers': ['filesecurity'],
            'propagate': True,
        },
    },
    # Настройка форматтеров(форматирование выводимых логов)
    'formatters': {
        'debugformatter': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
        'warningformatter': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s'
        },
        'errorformatter': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(exc_info)s %(message)s'
        },
        'generalfileformatter': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
        },
        'errorfileformatter': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'
        },
        'securityfileformatter': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
        },
        'sendmailadmins': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s'
        },
    },
    # Настройка фильтров
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },

        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    # Настройка хендлерров с указанием форматтеров, уровней и фильтров
    'handlers': {
        'console1': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'debugformatter',
        },
        'console2': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warningformatter',
        },
        'console3': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'errorformatter',
        },
        'filegeneral': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'generalfileformatter',
        },
        'fileerrors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'errorfileformatter'
        },
        'filesecurity': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'securityfileformatter'
        },
        'mailadmins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'sendmailadmins'
        },
    },

}


